#+TITLE: Todo-Cli
#+AUTHOR: Alejandro Rosario
#+PROPERTY: header-args :tangle main.py

* Table of Contents :toc:
- [[#introduction][Introduction]]
- [[#imports][Imports]]
- [[#add-arguments][Add Arguments]]
- [[#basic-configuration][Basic Configuration]]
- [[#the-version-function][The Version Function]]
- [[#the-create-to-do-list-function][The Create to-do List Function]]
- [[#the-add-to-do-item-function][The Add to-do Item Function]]
- [[#the-remove-to-do-list-function][The Remove to-do List Function]]
- [[#the-convert-interval-function][The Convert Interval Function]]
- [[#the-compare-date-function][The Compare Date Function]]
- [[#the-remind-if-due-function][The Remind if Due Function]]
- [[#the-send-sms-if-due-function][The Send SMS if Due Function]]
- [[#the-start-notification-daemon-function][The Start Notification Daemon Function]]
- [[#the-start-message-daemon-function][The Start Message Daemon Function]]
- [[#the-print-table-function][The Print Table Function]]
- [[#the-mark-as-done-function][The Mark as Done Function]]
- [[#the-mark-as-incomplete-function][The Mark as Incomplete Function]]
- [[#the-add-date-function][The Add Date Function]]
- [[#the-print-info-function][The Print Info Function]]
- [[#the-print-todo-function][The Print Todo Function]]
- [[#the-clear-history-function][The Clear History Function]]
- [[#the-main-function][The Main Function]]

* Introduction
This program was made so that everyone can keep track of what they need to do from the command line. This program is a final project for my computer science class and also a public project so that everyone else may benefit from it.

* Imports
These are the libraries that are required for this program to work. Each and every one of these must be at the top of the file for the program to work properly.

#+BEGIN_SRC python
#!/usr/bin/env python3
import os
import re
import smtplib
import time
import json
import argparse as ap
import shutil as sh
from pathlib import Path
from datetime import date, datetime
from threading import Thread
from tabulate import tabulate
from notify import notification as notif
#+END_SRC

* Add Arguments
This code block adds all command line arguments to a parser which keeps track of all arguments which may be given to the program.

#+BEGIN_SRC python
parser = ap.ArgumentParser()
parser.add_argument('-c', '--clear', action="store_true", help="Clear all to-do lists made by this program")
parser.add_argument('-p', '--print', metavar="todo-list", help="Print the specified to-do list")
parser.add_argument('-l', '--list', action="store_true", help="Lists all to-do lists that have been made")
parser.add_argument('-a', '--add', nargs=2, metavar=("todo-list", "todo-item"), help="Add to the to-do list")
parser.add_argument('-r', '--remove', metavar="todo-list", help="Remove the specified to-do list")
parser.add_argument('-v', '--version', action="store_true", help="Prints the version of the program")
parser.add_argument('-md', '--mark-as-done', nargs=2, metavar=("todo-list", "todo-item"), help="Mark a to-do list item as done")
parser.add_argument('-mi', '--mark-as-incomplete', nargs=2, metavar=("todo-list", "todo-item"), help="Mark a to-do list item as incomplete")
parser.add_argument('-ri', '--remove-item', nargs=2, metavar=('todo-list', 'todo-item'), help="Remove a to-do list item")
parser.add_argument('-cr', '--create', metavar="todo-list", help="Create a new to-do list")
parser.add_argument('-i', '--info', metavar="todo-list", help="List items in the specified to-do list and dates when they are due")
parser.add_argument('-ad', '--add-date', nargs=3, metavar=("todo-list", "todo-item", "due-date"), help="Add a due date to the specified to-do list item")
parser.add_argument('-d', '--daemonize', action="store_true", help="Start a background process to remind you when certain to-do items are due")
parser.add_argument('-me', '--message', action="store_true", help="Start a background process that checks if something is due in the interval specified and send a sms message if so")
parser.add_argument('-pt', '--print-table', action="store_true", help="Print a table of all items with information about each")
args = parser.parse_args()
#+END_SRC

* Basic Configuration
These are different vaiables that will be needed in order for certain functions within the program to work such as the carrier of the user if they want to use the messaging feature as well as intervals for the reminder functionality.

#+BEGIN_SRC python
HOME = os.path.expanduser('~')
DIRECTORY = HOME + "/.local/share/todo/"
VERSION = "0.0.1"
CONFIGURATION = HOME + "/.config/todo-cli/config.json"
CARRIER_DICT = {
        "verizon": "vtext.com",
        "tmobile": "tmomail.net",
        "sprint": "messaging.sprintpcs.com",
        "at&t": "txt.att.net",
        "boost": "smsmyboostmobile.com",
        "cricket": "sms.cricketwireless.net",
        "uscellular": "email.uscc.net",
        }

with open (CONFIGURATION, "r") as f:
    config = json.load(f)
    NOTIFICATION_INTERVAL = config["config"]["todo-cli"]["notif-interval"]
    CHECK_INTERVAL = config["config"]["todo-cli"]["check-interval"]
    COMPARE_UNIT = config["config"]["todo-cli"]["compare-unit"]
    EMAIL = config["config"]["todo-cli"]["email-address"]
    EMAIL_PASS = config["config"]["todo-cli"]["email-password"]
    PHONE_NUMBER = config["config"]["todo-cli"]["phone-number"]
    PHONE_CARRIER = config["config"]["todo-cli"]["phone-carrier"]
    #+END_SRC

* The Version Function
This function prints out the version to todo-cli to the console so that the user can keep track of it.

#+BEGIN_SRC python
def print_version() -> None:
    print(f"todo-cli {VERSION}")
#+END_SRC

* The Create to-do List Function
This function creates a to-do list if it does not already exist and names it "todo-name.txt" where name is the name of the to-do list and the argument given to the *-cr* flag.

#+BEGIN_SRC python
def create_todo(create) -> None:
    if not os.path.exists(DIRECTORY):
        os.mkdir(DIRECTORY)
    Path(DIRECTORY + "todo-" + create + ".txt").touch()
#+END_SRC

* The Add to-do Item Function
This function adds a to-do item to a specified list and also makes sure that the list specified exists and if not creates it.

#+BEGIN_SRC python
def add_item(todo_list: str, todo_item: str) -> None:
    name = todo_list
    todo_list = "todo-" + name + ".txt"
    if not os.path.exists(DIRECTORY):
        os.mkdir(DIRECTORY)
    with open (DIRECTORY + todo_list, "a") as f:
        f.write(todo_item + "\n")
#+END_SRC

* The Remove to-do List Function
This function removes a to-do list from the directory where the to-do list files are stored.

#+BEGIN_SRC python
def remove_list(todo_list: str) -> None:
    name = todo_list
    todo_list = "todo-" + name + ".txt"
    for file in os.walk(DIRECTORY):
        for todo in file[2]:
            if todo == todo_list:
                os.remove(DIRECTORY + todo)
#+END_SRC

* The Convert Interval Function
This function converts any unit of time to seconds so that other program functionality can work properly.

#+BEGIN_SRC python
def convert_interval(interval) -> int:
    number = re.compile('[0-9]')
    amount = number.search(interval)
    amount = amount.group()
    letter = re.compile('[a-z]')
    unit = letter.search(interval)
    unit = unit.group()
    if unit == "s":
        return int(amount)
    elif unit == "m":
        return int(amount) * 60
    elif unit == "h":
        return int(amount) * 3600
    elif unit == "d":
        return int(amount) * 86400
    elif unit == "w":
        return int(amount) * 604800
    elif unit == "M":
       return int(amount) * 2628000
#+END_SRC

* The Compare Date Function
This function takes a date in the format *mm/dd/yyyy* and compares it to the current date and returns the result in seconds.

#+BEGIN_SRC python
def compare_date(due_date, unit: str = COMPARE_UNIT) -> int:
    today = date.today().strftime("%m/%d/%Y")
    today = datetime.strptime(today, "%m/%d/%Y")
    due = datetime.strptime(due_date, "%m/%d/%Y")
    if unit == "minute":
        return (due - today).total_seconds() // 60
    elif unit == "hour":
        return (due - today).days * 24 + (due - today).seconds // 3600
    elif unit == "day" or unit is None:
        return (due - today).days
    elif unit == "week":
        return (due - today).days // 7
    elif unit == "month":
        return (due - today).days // 30
#+END_SRC

* The Remind if Due Function
This function checks if the amount of time in seconds returned by the compare date function is equal to the amount of time before the due date to give a reminder, specified by the user in the *config.json* file. If they are the program will send a notification reminding the user of said to-do item that is due in that interval of time.

#+BEGIN_SRC python
def remind_if_due() -> None:
    display = os.environ["DISPLAY"]
    todo_lists = os.listdir(DIRECTORY)
    for file in todo_lists:
        name_of_list = file.strip("todo-").strip(".txt")
        with open (DIRECTORY + file, "r") as f:
            lines = f.readlines()
            for line in lines:
               if "âœ“ " not in line:
                    pattern = re.compile('\d\d/\d\d/\d\d\d\d')
                    result = pattern.search(line)
                    item = re.compile('[a-z]|[A-Z]|\s')
                    item_search = item.findall(line)
                    final_item = "".join(item_search)
                    if result is not None:
                         result = result.group()
                    if result:
                        if compare_date(result, unit = COMPARE_UNIT) == int(NOTIFICATION_INTERVAL):
                            if display:
                                 notif("todo-cli", f"Your to-do item {final_item}from the {name_of_list} to-do list is due in " + str(NOTIFICATION_INTERVAL) + " " + COMPARE_UNIT + "(s)")
                            elif not display:
                                 print("Entering no-display mode:\nThe script has detected that you are not in a GUI environment and will now send notifications to the console")
                                 print(f"Your item {final_item}from the {name_of_list} to-do list is due tomorrow")
                        elif compare_date(result, unit = COMPARE_UNIT) == 0:
                             if display:
                                 notif("todo-cli", f"Your to-do item {final_item}from the {name_of_list} to-do list is due today")
                             elif not display:
                                print("Entering no-display mode:\nThe script has detected that you are not in a GUI environment and will now send notifications to the console")
                                print(f"Your item {final_item}from the {name_of_list} to-do list is due today")
                        elif compare_date(result, unit = COMPARE_UNIT) < 0:
                                print("hello", end='')
    time.sleep(convert_interval(CHECK_INTERVAL))
#+END_SRC

* The Send SMS if Due Function
This function has similiar functionality to the remind if due function except it reminds the user through text message instead of a notification on the computer itself.

#+BEGIN_SRC python
def send_sms_if_due() -> None:
    todo_lists = os.listdir(DIRECTORY)
    for file in todo_lists:
        name_of_list = file.strip("todo-").strip(".txt")
        with open (DIRECTORY + file, "r") as f:
            lines = f.readlines()
            for line in lines:
               pattern = re.compile('\d\d/\d\d/\d\d\d\d')
               result = pattern.search(line)
               item = re.compile('[a-z]|[A-Z]|\s')
               item_search = item.findall(line)
               final_item = "".join(item_search)
               if result is not None:
                    result = result.group()
               if result:
                   if compare_date(result, unit = COMPARE_UNIT) == int(NOTIFICATION_INTERVAL):
                        try:
                            sms_server = smtplib.SMTP("smtp.gmail.com", 587)
                            sms_server.starttls()
                            sms_server.login(EMAIL, EMAIL_PASS)
                            sms_body = (f"From: {EMAIL}\nTo: {PHONE_NUMBER}\n\nThis is the todo-cli reminder system: "
                            f"Your to-do item {final_item}from the {name_of_list} to-do list is due in " + str(NOTIFICATION_INTERVAL) + " " + COMPARE_UNIT + "(s)")
                            sms_server.sendmail(EMAIL, PHONE_NUMBER + "@" + CARRIER_DICT[PHONE_CARRIER], sms_body)
                            sms_server.close()
                        except:
                            print("Error: unable to send text")
    time.sleep(convert_interval(CHECK_INTERVAL))
#+END_SRC

* The Start Notification Daemon Function
This function starts a background process that runs the remind if due function every interval specified by the user in the *config.json* file.

#+BEGIN_SRC python
def start_notification_daemon() -> None:
    while True:
        reminder = Thread(target=remind_if_due, daemon=True)
        reminder.start()
        reminder.join()
#+END_SRC

* The Start Message Daemon Function
This function is the exact same as the start notification daemon function except it runs the send sms if due function.

#+BEGIN_SRC python
def start_message_daemon() -> None:
    while True:
        message_reminder = Thread(target=send_sms_if_due, daemon=True)
        mesage_reminer.start()
        message_reminder.join()
#+END_SRC

* The Print Table Function
This function prints out an organised table of every to-do list and every to-do item within that list with due date and if it is done or not.

#+BEGIN_SRC python
def print_table():
    table = [['list name', 'item', 'due date', 'is done']]
    todo_lists = os.listdir(DIRECTORY)
    for file in todo_lists:
        with open (DIRECTORY + file, "r") as f:
            lines = f.readlines()
            for line in lines:
                date_pattern = re.compile('\d\d/\d\d/\d\d\d\d')
                date_result = date_pattern.search(line)
                if date_result:
                    date = date_result.group()
                else:
                    date = "N/A"
                item_pattern = re.compile('[a-z]|[A-Z]|\s')
                item_result = item_pattern.findall(line)
                item = "".join(item_result)
                if "âœ“" in line:
                    is_done = True
                elif "ðŸ—¶ " in line:
                    is_done = False
                else:
                    is_done = False
                table.append([file.strip("todo-").strip(".txt"), item, date, is_done])
    print(tabulate(table, headers='firstrow', tablefmt='fancy_grid'))
#+END_SRC

* The Mark as Done Function
This function marks any item within any to-do list as done by representing it with a check mark next to the specified to-do item.

#+BEGIN_SRC python
def mark_as_done(todo_list: str, todo_item: str) -> None:
    name = todo_list
    todo_list = "todo-" + name + ".txt"
    with open (DIRECTORY + todo_list, "r") as f:
        lines = f.readlines()
        for line in lines:
           if todo_item in line and not "âœ“ " in line:
                    newline = line.replace(line, "âœ“ " + line)
                    newline = newline.replace("ðŸ—¶ ", "")
                    lines[lines.index(line)] = newline
           elif todo_item in line and "ðŸ—¶ " in line:
                    newline = line.replace(line, "âœ“ " + line)
                    lines[lines.index(line)] = newline
           elif todo_item in line and "âœ“ " in line:
                    print("This item is already marked as done")
    with open (DIRECTORY + todo_list, "w") as f:
        f.writelines(lines)
#+END_SRC

* The Mark as Incomplete Function
This function marks any item from any to-do list as incomplete by representing with an x next to the specified item.

#+BEGIN_SRC python
def mark_as_incomplete(todo_list: str, todo_item: str) -> None:
    name = todo_list
    todo_list = "todo-" + name + ".txt"
    with open (DIRECTORY + todo_list, "r") as f:
        lines = f.readlines()
        for line in lines:
            if todo_item in line and not "âœ“ " in line:
                newline = line.replace(line, "ðŸ—¶ " + line)
                lines[lines.index(line)] = newline
            elif todo_item in line and "âœ“ " in line:
                print("This item has been marked as done")
    with open (DIRECTORY + todo_list, "w") as f:
        f.writelines(lines)
#+END_SRC

* The Add Date Function
This function adds a due date to any item within any to-do list in the format *mm/dd/yyyy*.

#+BEGIN_SRC python
def add_date(todo_list: str, todo_item: str, date_due) -> None:
    name = todo_list
    todo_list = "todo-" + name + ".txt"
    with open (DIRECTORY + todo_list, "r") as f:
        lines = f.readlines()
        for line in lines:
            if todo_item in line:
                newline = line.replace(line, line.strip("\n") + " " + date_due + "\n")
                lines[lines.index(line)] = newline
    with open (DIRECTORY + todo_list, "w") as f:
        f.writelines(lines)
#+END_SRC

* The Print Info Function
This function prints out all to-do lists with all to-do items but without the table.

#+BEGIN_SRC python
def print_info(todo_list: str) -> None:
    name = todo_list
    todo_list = "todo-" + name + ".txt"
    with open (DIRECTORY + todo_list, "r+") as f:
        lines = f.readlines()
        for line in lines:
            print(line)
#+END_SRC

* The Print Todo Function
This function prints all to-do lists that currently exist in the to-do list directory by name.
#+BEGIN_SRC python
def print_todo(todo_list: str) -> None:
    name = todo_list
    todo_list = "todo-" + name + ".txt"
    if not os.path.exists(DIRECTORY + todo_list):
        print(f"{todo_list} does not exist")
    else:
        print(name + ":")
        with open (DIRECTORY + todo_list, "r") as f:
            for line in f:
                print("\t" + re.sub('[0-9]|/', '', line))
#+END_SRC

* The Clear History Function
This function checks if the size of a to-do list and if it is greater than 0 than it will write nothing to said to-do so the the user may reuse it later or delete it.

#+BEGIN_SRC python
def clear_history() -> None:
    for file in os.listdir(DIRECTORY):
        if os.path.getsize(DIRECTORY + file) > 0:
            with open (DIRECTORY + file, "w") as f:
                f.write("")
#+END_SRC

* The Main Function
This function checks if a certain argument is given to the program and runs the corresponding function(s) if it is.

#+BEGIN_SRC python
def main():
    if args.clear:
       clear_history()
    elif args.add:
        add_item(args.add[0], args.add[1])
    elif args.create:
        create_todo(args.create)
    elif args.print:
        print_todo(args.print)
    elif args.list:
        list_todo()
    elif args.remove:
        remove_list(args.remove)
    elif args.mark_as_done:
        mark_as_done(args.mark_as_done[0], args.mark_as_done[1])
    elif args.mark_as_incomplete:
        mark_as_incomplete(args.mark_as_incomplete[0], args.mark_as_incomplete[1])
    elif args.version:
        print_version()
    elif args.add_date:
        add_date(args.add_date[0], args.add_date[1], args.add_date[2])
    elif args.info:
        print_info(args.info)
    elif args.daemonize:
        start_notification_daemon()
    elif args.message:
        send_sms_if_due()
    elif args.print_table:
        print_table()
    else:
        print("No arguments given please supply an argument. For help do 'todo-cli -h'")

if __name__ == '__main__':
    main()
#+END_SRC
